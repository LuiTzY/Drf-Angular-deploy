# Utilizamos la tecnica de los multi-stage builds para reducir el tama√±o de la imagen final que tengamos

#Utilizamos la imagen de node con alpine para reducir espacios y creamos el stage de deps
FROM node:current-alpine3.20 AS deps

#Establecemos el workdir
WORKDIR /app

#Copiamos el package,json para instalar las deps
COPY package.json package.json

#Instalamos las deps
RUN npm install


#Establecemos el siguiente stage, que se encargara de construir la aplicacion, copiando las deps del node modules del otro stage
FROM node:current-alpine3.20 AS builder

#Establecemos el workdir
WORKDIR /app

#Copiamos las dependencias del stage de deps hacia este para construir la app
COPY --from=deps /app/node_modules ./node_modules

#Copiamos la aplicacion
COPY . .
#Construimos la app que nos creara debido al angular.json la carpeta dist/frontend/browser
RUN npm run build


#Etapa final del stage
FROM nginx:1.23.3 AS prod

#Exponemos el puerto 80, que es el que utiliza nginx
EXPOSE 80

#Copiamos la carpeta generada por el builder stage, hacia la carpeta de nginx para servir la aplicacion
COPY --from=builder /app/dist/frontend/browser /usr/share/nginx/html 

COPY frontend-ssl.sh /usr/share/nginx/html

#Borramos la config por defecto
RUN rm /etc/nginx/conf.d/default.conf && sh /usr/share/nginx/html/frontend-ssl.sh


#Copiamos nuestra configuracion 
COPY  nginx.conf /etc/nginx/conf.d/default.conf 

#Corremos nginx
CMD [ "nginx","-g","daemon off;" ]